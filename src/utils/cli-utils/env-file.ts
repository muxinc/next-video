import { readFile, writeFile, access } from 'node:fs/promises';
import log from '../logger.js';

export async function readEnvFile(filePath: string = '.env.local'): Promise<Record<string, string>> {
  try {
    await access(filePath);
    const content = await readFile(filePath, 'utf-8');

    const envVars: Record<string, string> = {};
    const lines = content.split('\n');

    for (const line of lines) {
      const trimmedLine = line.trim();
      if (!trimmedLine || trimmedLine.startsWith('#')) continue;

      const equalIndex = trimmedLine.indexOf('=');
      if (equalIndex > 0) {
        const key = trimmedLine.substring(0, equalIndex).trim();
        const value = trimmedLine.substring(equalIndex + 1).trim();
        const cleanValue = value.replace(/^["']|["']$/g, '');
        envVars[key] = cleanValue;
      }
    }

    return envVars;
  } catch (error: any) {
    if (error.code === 'ENOENT') return {};
    throw error;
  }
}

export async function updateEnvFile(newVars: Record<string, string>, filePath: string = '.env.local'): Promise<void> {
  const existingVars = await readEnvFile(filePath);
  const mergedVars = { ...existingVars, ...newVars };

  const lines: string[] = [];
  if (Object.keys(existingVars).length === 0) {
    lines.push('# next-video environment variables');
    lines.push('# Generated by next-video init command');
    lines.push('');
  }

  for (const [key, value] of Object.entries(mergedVars)) {
    const formattedValue = value.includes(' ') ? `"${value}"` : value;
    lines.push(`${key}=${formattedValue}`);
  }

  await writeFile(filePath, lines.join('\n') + '\n', 'utf-8');
  log.info(`Environment variables updated in ${filePath}`);
}

export async function ensureEnvInGitignore(): Promise<void> {
  try {
    const content = await readFile('.gitignore', 'utf-8');
    if (!content.includes('.env.local')) {
      await writeFile('.gitignore', content + '\n# Environment variables\n.env.local\n', 'utf-8');
      log.info('Added .env.local to .gitignore');
    }
  } catch (error: any) {
    if (error.code === 'ENOENT') {
      await writeFile('.gitignore', '# Environment variables\n.env.local\n', 'utf-8');
      log.info('Created .gitignore with .env.local entry');
    } else {
      log.warning('Could not update .gitignore:', error.message);
    }
  }
}
